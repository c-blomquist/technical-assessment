12/22/22:
  Technical assessment was recieved, and I forked the repo to be able to work on my own version of the assessment. Started reading up on Node.JS, Angular 2+, and Postman as I only have experience with Node.JS and Postman from the Authentication and Authorization presentation that Paige Zalepaa did for the Software Engineering Club.
  
12/23/22
  Cloned the repository to VSCode to be able to learn how to better do commits as in the past I used gitHub somewhat improperly by mostly just uploading files straight to gitHub or editing the files using the gitHub editor through their website.
  I have gotten the Backend API working with the message "Welcome to the Backend API!" displaying when you navigate to "localhost:3000". I have looked through the technical-assessment/backend/src files and I definitely need to do more reading into Javascript and Node.JS to be able to effectively write the code asked for.
  I since have gotten the Frontend running and showing "Hero List" and I have not added any heroes through Postman, so there is currently none showing. I did have some difficulties with being able to use the correct version of Node.JS and npm, as the current version of Node.JS runs into an issue with one of the hash functions. This gitHub link shows the error: https://github.com/webpack/webpack/issues/15900 and then this link shows the response that is given as the solution that the Node.JS developers just removed the functionality with no deprecation message either: https://github.com/webpack/webpack/issues/14532#issuecomment-947525539. While the solutions talked about in these gitHub issues most likely work, I used nvm (node version manager) to use an older version of Node.JS that are outlined in the technical-assessment/frontend/package-lock.json file instead of trying change the code to update the version of Node.JS that the the technical assessment uses.
  For the rest of the time working today I will be investigating how to actually use the tech stack to accomplish the goals of the technical assessment to be able to hopefully do some of the backend tasks and some of the frontend tasks.
    At night, I worked a little more attempting to use the Heroes code to work on creating one for Quests. Currently, the create Quest is not structured correctly based on the json body given in the ../backend/readME.md notes as that body wants only the name and description for the json while I currently have the hero id in the json body too. The POST request also does not currently work with taking in the hero id in the json body.

12/24/22
  I fixed the syntax of the createQuest() function so that it actually functions correctly. I was using the source code for Heroes as a baseline, and I accidentally typed "Heroes" instead of quests in some parts, and quests instead of Heroes in another part, and some other syntax issues due to simpley overlooking them. The function now does work with inputting a quest, however the hero_id is still manually put in the json body. 
  I also learned more about the /** */ comments and how they are able to be used for documentation by using other 3rd party tools from this source: https://www.reddit.com/r/learnprogramming/comments/190qsv/js_is_there_any_difference_between_comments_with/ so I will be updating my comments to match this style used by the example source code for consistency. The createQuest post request is now changed to not take the heroID in the json body, however this first attempt of trying to pass the heroID did not work and it was not attatched to the json body correctly during a get request. Also, it does not verify if the hero exists.
  Found a resource that helped me understand that you can access specific values from the body using body.[value], and this enabled me to correctly add in the heroID: https://www.digitalocean.com/community/tutorials/how-to-work-with-json-in-javascript. Furthermore, I added in a check that the heroID does exist, and luckily VSCode automatically added the import for HeroDB because I did not think about needing that imported, but that makes perfect sense once I saw it happen.
  I have now gotten more used to the functions and objects used for the backend and so tasks 1 and tasks 2 were much easier to implement working off the Heroes functionality already implemented. One area that I did have trouble in was getting all the quests for a heroID since .find just finds one of them, and this resource helped me learn about .filter: https://stackoverflow.com/questions/57198332/select-a-property-from-an-array-of-objects-based-on-a-value-javascript. Once I learned about .filter I was also able to use the ctrl+left click feature in VSCode to take me to the documentation within the extension to make sure that I was using it correctly.

12/26/22
  Task 4 was pretty simple to implement functionality with using the Hero router as a guide and having done the hero/quest existing and checking the hero and quest ids to make sure they were matching in Task 3.

12/27/22
  After having implemented all 4 tasks for the backend, I then went to add in tests for the quests router. I have never used Jest or Supertest before, so I was able to use the provided documentation to learn more about themm:
  https://www.npmjs.com/package/supertest?activeTab=readme
  https://jestjs.io/docs/asynchronous
  https://www.albertgao.xyz/2017/05/24/how-to-test-expressjs-with-jest-and-supertest/ 
  Furthermore, I also had been using "=>" due to it being located in all the given hero functions, but I honestly was not totally sure of the meaning of the symbol and was able to find this resource to learn about how it is just to signify a function: https://stackoverflow.com/questions/41702205/what-does-this-symbol-mean-in-javascript. 
  I also struggled with the delete test as it would return a 404 instead of a 400 when testing for the heroID matching with the quest, and I eventually did realize that this is because we would delete the quest during testing beforehand, so I needed to check for that before checking on deleting a quest. Now there are 2 passing test suites, and 21 tests to pass, and all are succesful. 